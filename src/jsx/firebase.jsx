// firebase.jsx
import { ref as dbRef, set, push, onValue } from 'firebase/database';
import { ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';
import { database, storage } from './firebase2';

// üîπ √úzenet k√ºld√©se Firebase-be
export function sendMessage(messageText, userId) {
  const newMessageRef = push(dbRef(database, 'chats/'));
  set(newMessageRef, {
    userId,
    message: messageText,
    timestamp: Date.now(),
  });
}

// üîπ √úzenetek lek√©r√©se val√≥s id≈ëben
export function listenForMessages(setMessages) {
  const messagesRef = dbRef(database, 'chats/');
  onValue(messagesRef, (snapshot) => {
    const data = snapshot.val();
    const messages = [];
    for (let key in data) {
      messages.push(data[key]);
    }
    setMessages(messages);
  });
}

// üîπ K√©p felt√∂lt√©se Firebase Storage-ba (hibakezel√©ssel)
export const uploadImage = async (file, callback) => {
  if (!file || !file.name) {
    console.error("‚ùå Hib√°s vagy hi√°nyz√≥ f√°jl a felt√∂lt√©shez:", file);
    return;
  }

  try {
    const fileRef = storageRef(storage, `images/${file.name}`);
    const snapshot = await uploadBytes(fileRef, file);
    const downloadURL = await getDownloadURL(snapshot.ref);
    console.log('‚úÖ F√°jl felt√∂ltve, el√©r√©si URL:', downloadURL);
    if (callback) callback(downloadURL);
  } catch (error) {
    console.error('üî• Hiba a f√°jl felt√∂lt√©se k√∂zben:', error);
  }
};

// üîπ Esem√©ny ment√©se Realtime Database-be
export const saveEvent = (event) => {
  const eventRef = dbRef(database, 'events/' + event.id);
  set(eventRef, event)
    .then(() => {
      console.log('‚úÖ Esem√©ny sikeresen mentve!');
    })
    .catch((error) => {
      console.error('‚ùå Hiba az esem√©ny ment√©sekor:', error);
    });
};
